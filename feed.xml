<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://akshathraghav.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://akshathraghav.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-04T06:13:14+00:00</updated><id>https://akshathraghav.github.io/feed.xml</id><title type="html">&lt;u&gt;a&lt;/u&gt;kshath raghav &lt;u&gt;raviki&lt;/u&gt;ran</title><subtitle></subtitle><entry><title type="html">Supercharging your agent chains with GrammarFlow 🪢</title><link href="https://akshathraghav.github.io/blog/2024/grammarflow/" rel="alternate" type="text/html" title="Supercharging your agent chains with GrammarFlow 🪢"/><published>2024-03-26T17:57:00+00:00</published><updated>2024-03-26T17:57:00+00:00</updated><id>https://akshathraghav.github.io/blog/2024/grammarflow</id><content type="html" xml:base="https://akshathraghav.github.io/blog/2024/grammarflow/"><![CDATA[<h1 id="-grammarflow">🪢 GrammarFlow</h1> <p>🚀 Powering Agent Chains by Constraining LLM Outputs 🚀</p> <h1 id="table-of-contents">Table of contents</h1> <ol> <li><a href="https://github.com/e-lab/SyntaxShaper/tree/main?tab=readme-ov-file#-what-is-this">What is this</a></li> <li><a href="https://github.com/e-lab/SyntaxShaper/tree/main?tab=readme-ov-file#-quick-install">Quick Install</a></li> <li><a href="https://github.com/e-lab/SyntaxShaper/tree/main?tab=readme-ov-file#-code-usage">Code Usage</a></li> <li><a href="https://github.com/e-lab/SyntaxShaper/tree/main?tab=readme-ov-file#examples--samples">Examples (@ samples/)</a></li> <li><a href="https://github.com/e-lab/SyntaxShaper/tree/main?tab=readme-ov-file#gnbf-grammar">GNBF Grammar</a></li> <li><a href="https://github.com/e-lab/SyntaxShaper/tree/main?tab=readme-ov-file#remarks">Remarks!</a></li> <li><a href="https://github.com/e-lab/SyntaxShaper/tree/main?tab=readme-ov-file#citation">Citation</a></li> </ol> <h2 id="-what-is-this">🤔 What is this?</h2> <p>This repository contains code to abstract the LLM output constraining process. It helps you define your grammar rules using Pydantic and Typing in a pythonic way, and inherently embeds metadata from these dataclasses into the prompt. Parsing is enabled in JSON, TOML and XML formats, with custom parsers that avoid the issues faced by <code class="language-plaintext highlighter-rouge">json.loads</code> (..etc) while parsing direct outputs. It can also create GNBF grammr from the same, which is used by the <code class="language-plaintext highlighter-rouge">llama.cpp</code> package for sampling logits smartly.</p> <p>The goal of this package was to overcome the issues faced when using langchain’s output parsers with instruct language models. While GPT-4 produces consistent results in returning the correct formats, Llama-7B would cause parsing errors in my testing chains with more complex prompts.</p> <blockquote> <p>Please reach out to <code class="language-plaintext highlighter-rouge">araviki [at] purdue [dot] edu</code> or open an issue on Github if you have any questions or inquiry related to GrammarFlow and its usage.</p> </blockquote> <h2 id="-quick-install">⚡ Quick Install</h2> <p><code class="language-plaintext highlighter-rouge">pip install grammarflow</code></p> <h2 id="-code-usage">📃 Code Usage</h2> <ol> <li> <p>Map out what your agent chain is doing. Understand what it’s goals are and what data needs to be carried forward from one step to the next. For example, consider the <a href="https://react-lm.github.io/">ReAct prompting framework</a>. In every call, we want to pass in the Action and subsequent Observation to the next call.</p> </li> <li>Load grammarflow <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from grammarflow import * 
</code></pre></div> </div> </li> <li>Make a Pydantic Model for the above case. Here’s a sample: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ThoughtState</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
 <span class="n">thought</span><span class="p">:</span> <span class="nb">str</span>
 <span class="n">goal</span><span class="p">:</span> <span class="nb">str</span>
 <span class="n">tool</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(...,</span>
                   <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Choose one of [</span><span class="sh">'</span><span class="s">Web_QA</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Web_Search</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Web_Scraping</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Web_Automation</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Web_Research</span><span class="sh">'</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>
 <span class="n">action</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(...,</span>
                     <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Choose one of [</span><span class="sh">'</span><span class="s">Create</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Update</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Delete</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Read</span><span class="sh">'</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>
 <span class="n">action_input</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(...,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">The input data for the action</span><span class="sh">"</span><span class="p">)</span>
 <span class="n">thought_id</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span>
     <span class="bp">None</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">1 if it is the first thought, 0 if it is the final thought.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div> </div> </li> <li>[Optional] Create a prompt template using grammarflow’s PromptBuilder. Below is an example of the Llama prompt template. <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">llama_prompt</span> <span class="o">=</span> <span class="nc">PromptBuilder</span><span class="p">()</span>
<span class="n">llama_prompt</span><span class="p">.</span><span class="nf">add_section</span><span class="p">(</span>
 <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">&lt;s&gt;[INST] &lt;&lt;SYS&gt;&gt;</span><span class="se">\n</span><span class="s">{system_context}</span><span class="se">\n</span><span class="s">&lt;&lt;/SYS&gt;&gt;</span><span class="sh">"</span><span class="p">,</span>
 <span class="n">placeholder</span><span class="o">=</span><span class="sh">"</span><span class="s">system_context</span><span class="sh">"</span><span class="p">,</span>
 <span class="n">define_grammar</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">llama_prompt</span><span class="p">.</span><span class="nf">add_section</span><span class="p">(</span>
 <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">{user_message}[/INST]</span><span class="sh">"</span><span class="p">,</span>
 <span class="n">placeholder</span><span class="o">=</span><span class="sh">"</span><span class="s">user_message</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div> </div> <p>You can find an in-depth explanation on making prompts <a href="https://github.com/e-lab/SyntaxShaper/blob/main/samples/demo.ipynb">here</a>!</p> </li> <li>[Optional] If you decide to make your own template, define your system_context and user_message <code class="language-plaintext highlighter-rouge">placeholders</code>. <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">system_context</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Your goal is to think and plan out how to solve questions using agent tools provided to you. Think about all aspects of your thought process.</span><span class="sh">"""</span>
<span class="n">user_message</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Who is Vladmir Putin?</span><span class="sh">"""</span>
</code></pre></div> </div> </li> <li>Invoke the <code class="language-plaintext highlighter-rouge">Constrain</code> block with the prompt. Set the configuration metadata, and format the prompt with the required <code class="language-plaintext highlighter-rouge">grammars</code> and <code class="language-plaintext highlighter-rouge">placeholders</code>. <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nc">Constrain</span><span class="p">(</span><span class="n">llama_prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">manager</span><span class="p">:</span>
 <span class="n">manager</span><span class="p">.</span><span class="nf">set_config</span><span class="p">(</span>
     <span class="nb">format</span><span class="o">=</span><span class="sh">'</span><span class="s">json</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># or 'xml', 'toml'. 
</span>     <span class="n">return_sequence</span><span class="o">=</span><span class="sh">'</span><span class="s">single_response</span><span class="sh">'</span> <span class="c1"># or 'multi_response', if you need multiple grammars. 
</span> <span class="p">)</span>

 <span class="c1"># Makes the changes to the prompt
</span> <span class="n">manager</span><span class="p">.</span><span class="nf">format_prompt</span><span class="p">(</span><span class="n">placeholders</span><span class="o">=</span><span class="p">{</span> <span class="c1"># if you have placeholders in the prompt
</span>                       <span class="sh">'</span><span class="s">user_message</span><span class="sh">'</span><span class="p">:</span> <span class="n">user_message</span><span class="p">,</span>
                       <span class="sh">'</span><span class="s">system_context</span><span class="sh">'</span><span class="p">:</span> <span class="n">system_context</span>
                       <span class="p">},</span>
                       <span class="n">grammars</span><span class="o">=</span><span class="p">[{</span>
                           <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">This format describes your current thinking state</span><span class="sh">'</span><span class="p">,</span> <span class="c1"># Description of the response format
</span>                           <span class="sh">'</span><span class="s">model</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="n">ThoughtState</span><span class="p">]}</span>
                       <span class="p">]</span>
 <span class="p">)</span>

 <span class="c1"># Assume `llm` to be a call to a model
</span> <span class="n">llm_response</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="n">manager</span><span class="p">.</span><span class="n">prompt</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>

 <span class="c1"># Parse the response into a custom dataclass for holding values
</span> <span class="n">response</span> <span class="o">=</span> <span class="n">manager</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">llm_response</span><span class="p">)</span>
</code></pre></div> </div> </li> <li>Extract the required values from the response to perform necessary functions on.</li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">observation</span> <span class="o">=</span> <span class="nc">PerformSomeAction</span><span class="p">(</span>
  <span class="n">action</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">ThoughtState</span><span class="p">.</span><span class="n">action</span><span class="p">,</span> 
  <span class="n">action_input</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">ThoughtState</span><span class="p">.</span><span class="n">action_input</span>
<span class="p">)</span> 
</code></pre></div></div> <ol> <li>Continue to the next iteration in your agent chain!</li> </ol> <h3 id="examples--samples">Examples (@ samples/)</h3> <ol> <li>For a general overview of what GrammarFlow can do, look at <a href="https://github.com/e-lab/SyntaxShaper/blob/main/samples/demo.ipynb">demo.ipynb</a>.</li> <li>For my modification to <a href="https://github.com/ysymyth/ReAct">ReAct’s</a> evaluation code on <a href="https://hotpotqa.github.io/">HotPotQA</a>, look at <a href="https://github.com/e-lab/SyntaxShaper/blob/main/samples/hotpotqa/hotpotqa_modified.ipynb">hotpotqa_modified</a>.</li> <li>I’ve also added an implementation of a <a href="https://github.com/e-lab/SyntaxShaper/blob/main/samples/bert_finetuning/annotator.ipynb">data annotator</a> for this <a href="https://www.datasciencecentral.com/how-to-fine-tune-bert-transformer-with-spacy-3/">BERT fine-tuning guide</a>.</li> </ol> <h3 id="gnbf-grammar">GNBF Grammar</h3> <p>GrammarFlow also has functionality to convert a pydantic model into GNBF grammar.</p> <blockquote> <p>“GBNF (GGML BNF) is a format for defining formal grammars to constrain model outputs in llama.cpp. For example, you can use it to force the model to generate valid JSON, or speak only in emojis.” Read more about it here: https://github.com/ggerganov/llama.cpp/blob/master/grammars/README.md</p> </blockquote> <p>This can then be passed into llama.cpp using llama-cpp-python to ensure that sampling of logits can take place with rules in mind.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define your model 
</span><span class="k">class</span> <span class="nc">TeamMember</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">role</span><span class="p">:</span> <span class="nb">str</span>

<span class="k">class</span> <span class="nc">TaskUpdate</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">update_time</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">comment</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">status</span><span class="p">:</span> <span class="nb">bool</span>

<span class="k">class</span> <span class="nc">Task</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">title</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">assigned_to</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">TeamMember</span><span class="p">]</span>
    <span class="n">due_date</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">updates</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">TaskUpdate</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">Project</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">project_url</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">team_members</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">TeamMember</span><span class="p">]</span>
    <span class="n">grammars</span><span class="p">:</span> <span class="n">Task</span>

<span class="c1"># Convert to grammar
</span><span class="kn">from</span> <span class="n">grammarflow</span> <span class="kn">import</span> <span class="n">GNBF</span>

<span class="n">grammar</span> <span class="o">=</span> <span class="nc">GNBF</span><span class="p">(</span><span class="n">Project</span><span class="p">).</span><span class="nf">generate_grammar</span><span class="p">()</span>

<span class="c1"># Verify with LlamaGrammar
</span><span class="n">GNBF</span><span class="p">.</span><span class="nf">verify_grammar</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>

<span class="c1"># Use it with the model 
</span><span class="k">with</span> <span class="nc">Constrain</span><span class="p">(</span><span class="n">llama_prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">manager</span><span class="p">:</span> 
    <span class="n">manager</span><span class="p">.</span><span class="nf">set_config</span><span class="p">(...)</span>
    <span class="n">manager</span><span class="p">.</span><span class="nf">format_prompt</span><span class="p">(...)</span>

    <span class="n">llm_response</span> <span class="o">=</span> <span class="nf">llm</span><span class="p">(</span>
        <span class="n">manager</span><span class="p">.</span><span class="n">prompt</span><span class="p">,</span>
        <span class="n">grammar</span><span class="o">=</span><span class="n">grammar</span><span class="p">,</span> <span class="n">max_tokens</span><span class="o">=-</span><span class="mi">1</span>
    <span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">manager</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">llm_response</span><span class="p">)</span>
</code></pre></div></div> <h2 id="remarks">Remarks!</h2> <p>Please keep in mind that this package is purely software driven and aims to make developers lives a little simpler. Powerful models like GPT, Llama and Mixtral Instruct work well with this package. MoE systems are able to evaluate which model can provide reasoning and constrainability (purely how well it handles ‘instructions’).</p> <p>However, with an increase in the complexity of the prompt, most models fail. This has to do with the model itself, and can be improved using token sampling using llama.cpp. But, a purely prompt-based approach cannot solve everything.</p> <p>Take, for example, you want to evaluate hotpotqa as explained in this notebook. When you run the scipt, you might find that Mixtral outputs parseable returns for JSON and XML formats in the first 2 runs. Post this, the model gets confused because of the way the prompt itself is constructed + ReAct’s helper functions formats.</p> <h2 id="citation">Citation</h2> <p>We appreciate it if you would please cite this repo if you found the library useful for your work:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@software{GrammarFlow,
  author = {Ravikiran, Akshath Raghav and Culurciello, Eugenio},
  title = {GrammarFlow: Powering Agent Chains by Constraining LLM Outputs},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/e-lab/GrammarFlow}}, 
  version = {0.0.9}
}
</code></pre></div></div>]]></content><author><name></name></author><category term="software"/><category term="software"/><category term="research"/><summary type="html"><![CDATA[Constraining LLM outputs with Grammars]]></summary></entry><entry><title type="html">Set up Llama.cpp on university compute clusters 🦙</title><link href="https://akshathraghav.github.io/blog/2024/geojson-map/" rel="alternate" type="text/html" title="Set up Llama.cpp on university compute clusters 🦙"/><published>2024-03-23T17:57:00+00:00</published><updated>2024-03-23T17:57:00+00:00</updated><id>https://akshathraghav.github.io/blog/2024/geojson-map</id><content type="html" xml:base="https://akshathraghav.github.io/blog/2024/geojson-map/"><![CDATA[<p>Welcome to the quick start guide for running <code class="language-plaintext highlighter-rouge">llama.cpp</code> on academic/research community compute clusters <strong>without root access</strong>.</p> <h2 id="why-this-guide-is-necessary">Why This Guide is Necessary</h2> <p>On Purdue’s RCAC clusters, users often face the issue of the lack of sudo access. This limitation restricts the ability to install packages or update system libraries (which are very old on these clusters). They contain module systems which help to load and install cudatoolkit and gcc, but I’ve faced issues with GLIB versions reflecting on conda environmnets using this method.</p> <p>This repository has a set of bash scripts that allow users to install and configure gcc and the NVIDIA Toolkit in a user-specific directory. This approach ensures that you can run <code class="language-plaintext highlighter-rouge">llama.cpp</code> without the need for administrative privileges.</p> <h3 id="before-you-start">Before You Start</h3> <p>Ensure you have permission to execute scripts and access clusters. Familiarity with basic terminal commands and the Linux environment will be helpful.</p> <h2 id="1-nvidia-toolkit-installation">1. NVIDIA Toolkit Installation</h2> <p>The NVIDIA Toolkit includes libraries and tools essential for developing applications that leverage NVIDIA GPUs.</p> <p>Extras:</p> <ul> <li><a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=7&amp;target_type=runfile_local">Toolkit Download</a></li> <li><a href="https://stackoverflow.com/questions/39379792/install-cuda-without-root">StackOverflow Thread</a></li> </ul> <h3 id="steps">Steps:</h3> <ol> <li><strong>Configure Installation Directory</strong>: <ul> <li>Edit <code class="language-plaintext highlighter-rouge">nvidia-toolkit.sh</code> to specify your installation directory by changing the <code class="language-plaintext highlighter-rouge">ROOT_DIR</code> variable.</li> </ul> </li> <li><strong>Execute the Script</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash nvidia-toolkit.sh
</code></pre></div> </div> <p>Complete the setup by following the prompts.</p> </li> </ol> <h3 id="toolkit-setup">Toolkit Setup</h3> <ol> <li>Type <code class="language-plaintext highlighter-rouge">accept</code> in the console.</li> </ol> <div> <img href="https://github.com/AkshathRaghav/llama_on_community_clusters/blob/main/assets/1.png" alt="1" style="height: 50%;"/> </div> <ol> <li>Use <code class="language-plaintext highlighter-rouge">ENTER</code> to select/deselect settings. Make sure the settings screen looks like the following image:</li> </ol> <div> <img href="https://github.com/AkshathRaghav/llama_on_community_clusters/blob/main/assets/2.png" alt="1" style="height: 50%;"/> </div> <ol> <li>Hover over the <code class="language-plaintext highlighter-rouge">CUDA Toolkit 12.3</code> option, and press <code class="language-plaintext highlighter-rouge">A</code>. Deselect all of the settings here except <code class="language-plaintext highlighter-rouge">Install manpage documents...</code></li> </ol> <div> <img href="https://github.com/AkshathRaghav/llama_on_community_clusters/blob/main/assets/3.png" alt="1" style="height: 50%;"/> </div> <ol> <li>Hover over <code class="language-plaintext highlighter-rouge">Change Toolkit Install Path</code>. Hit <code class="language-plaintext highlighter-rouge">ENTER</code> and add the $TOOLKIT variable path here.</li> </ol> <div> <img href="https://github.com/AkshathRaghav/llama_on_community_clusters/blob/main/assets/4.png" alt="1" style="height: 50%;"/> </div> <ol> <li>Finally, exit out into the main menu, hover over <code class="language-plaintext highlighter-rouge">Install</code> and hit <code class="language-plaintext highlighter-rouge">ENTER</code>.</li> </ol> <p>Now, add these lines to the bottom of your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">TOOLKIT</span><span class="o">={}</span>

<span class="c"># Leave as is</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$TOOLKIT</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$TOOLKIT</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
</code></pre></div></div> <h2 id="2-gcc-installation">2. gcc Installation</h2> <p>gcc (GNU Compiler Collection) is a compiler system supporting various programming languages, crucial for software development and execution. Gilbreth, and other clusters like Negishi, use a version below &lt;11.x.x&gt;. llama.cpp requires a higher version. We will be using the latest version: &lt;12.3.0&gt;.</p> <p>Extra:</p> <ul> <li><a href="https://gcc.gnu.org/install/configure.html">GNU Docs</a></li> <li><a href="https://stackoverflow.com/questions/10279829/installing-glib-in-non-standard-prefix-fails">StackOverflow Thread</a></li> <li><a href="https://github.com/ggerganov/llama.cpp/issues/552">Llama.cpp discussion</a></li> </ul> <h3 id="steps-1">Steps:</h3> <ol> <li><strong>Configure Installation Directory</strong>: <ul> <li>Open <code class="language-plaintext highlighter-rouge">gcc.sh</code> in a text editor.</li> <li>Set <code class="language-plaintext highlighter-rouge">ROOT_DIR</code> to your desired installation directory.</li> <li>The script ensures that <code class="language-plaintext highlighter-rouge">hrefdir</code> (href_DIR) and <code class="language-plaintext highlighter-rouge">objdir</code> (BUILD_DIR) are different directories. If you do wish to change these paths, make sure that they point to different locations.</li> </ul> </li> <li><strong>Run the Script</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash gcc.sh
</code></pre></div> </div> </li> </ol> <p>If you face any issues, run <code class="language-plaintext highlighter-rouge">make -k distclean &amp;&amp; make -k clean</code> to undo what was done by <code class="language-plaintext highlighter-rouge">./configure</code> and <code class="language-plaintext highlighter-rouge">make</code>. Then, debug. Otherwise, this will cause issues down the line.</p> <p>Now, add these lines to the bottom of your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ROOT_DIR</span><span class="o">={}</span>
<span class="nb">export </span><span class="nv">href_DIR</span><span class="o">=</span><span class="nv">$ROOT_DIR</span>/gcc/gcc_href <span class="c"># Change this is needed</span>
<span class="nb">export </span><span class="nv">BUILD_DIR</span><span class="o">=</span><span class="nv">$ROOT_DIR</span>/gcc/gcc_build <span class="c"># Change this if neeeded</span>

<span class="c"># Leave as is</span>
<span class="nb">export </span><span class="nv">CC</span><span class="o">=</span>gcc
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$BUILD_DIR</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$BUILD_DIR</span>/local/lib:<span class="nv">$BUILD_DIR</span>/lib:<span class="nv">$BUILD_DIR</span>/local/lib64:<span class="nv">$BUILD_DIR</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
</code></pre></div></div> <h2 id="3-running-llamacpp">3. Running llama.cpp</h2> <p>With gcc and the NVIDIA Toolkit set up, you’re now ready to compile and run <code class="language-plaintext highlighter-rouge">llama.cpp</code>.</p> <p>Extras:</p> <ul> <li><a href="https://github.com/ggerganov/llama.cpp?tab=readme-ov-file">Llama.cpp</a></li> <li><a href="https://stackoverflow.com/questions/39649102/how-do-i-select-which-gpu-to-run-a-job-on">Jobs on GPU</a></li> <li><a href="https://kubito.dev/posts/llama-cpp-linux-nvidia/">Llama.cpp flags</a></li> </ul> <h3 id="steps-2">Steps:</h3> <ol> <li> <p><strong>NOTE:</strong> If you have run the above scripts in a previous session, then ensure you have added the environoment paths to your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file with the same paths you used in <code class="language-plaintext highlighter-rouge">gcc.sh</code> and <code class="language-plaintext highlighter-rouge">nvidia-toolkit.sh</code>. This sets the paths to look at our local installations.</p> </li> <li> <p><strong>Download the llama Script</strong>: <code class="language-plaintext highlighter-rouge">llama.sh</code> is designed to compile and execute <code class="language-plaintext highlighter-rouge">llama.cpp</code> using the previously installed tools.</p> </li> <li><strong>Configure Installation Directory</strong>: <ul> <li>Modify <code class="language-plaintext highlighter-rouge">llama.sh</code>, setting <code class="language-plaintext highlighter-rouge">LLAMA_DIR</code> to the directory where gcc and the NVIDIA Toolkit are installed.</li> </ul> </li> <li><strong>Launch the Script</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash llama.sh
</code></pre></div> </div> <p>This script compiles <code class="language-plaintext highlighter-rouge">llama.cpp</code> and runs it. Follow any instructions or prompts that appear.</p> </li> </ol> <h3 id="running-inference">Running inference</h3> <p>Ensure all of these lines exist within your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ROOT_DIR</span><span class="o">=</span>/depot/euge/data/araviki
<span class="nb">export </span><span class="nv">TOOLKIT</span><span class="o">=</span><span class="nv">$ROOT_DIR</span>/nvidia-toolkit/12.3
<span class="nb">export </span><span class="nv">href_DIR</span><span class="o">=</span><span class="nv">$ROOT_DIR</span>/gcc/gcc_href
<span class="nb">export </span><span class="nv">BUILD_DIR</span><span class="o">=</span><span class="nv">$ROOT_DIR</span>/gcc/gcc_build

<span class="c"># Leave as is</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$TOOLKIT</span>/bin:<span class="nv">$BUILD_DIR</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$TOOLKIT</span>/lib64:<span class="nv">$BUILD_DIR</span>/local/lib:<span class="nv">$BUILD_DIR</span>/lib:<span class="nv">$BUILD_DIR</span>/local/lib64:<span class="nv">$BUILD_DIR</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">LLAMA</span><span class="o">=</span><span class="nv">$ROOT_DIR</span>/llama
</code></pre></div></div> <p>Now, you are ready to run llama.cpp. I’ve bound the path of my main <code class="language-plaintext highlighter-rouge">llama</code> folder to <code class="language-plaintext highlighter-rouge">$LLAMA</code>, so that I can call it as follows:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># - araviki</span>
   <span class="c"># - llama</span>
      <span class="c"># - gguf # Storing quantized models</span>
      <span class="c"># - llama.cpp # href</span>
         <span class="c"># - main</span>
         <span class="c"># - prompts/</span>
         <span class="c"># - grammars/</span>

<span class="nv">$LLAMA</span>/llama.cpp/main <span class="nt">--color</span> <span class="nt">--interactive</span> <span class="nt">--model</span> <span class="nv">$LLAMA</span>/gguf/llama-2-13b.Q5_K_M.gguf <span class="nt">--n-predict</span> 512 <span class="nt">--repeat_penalty</span> 1.0 <span class="nt">--n-gpu-layers</span> 15000 <span class="nt">--reverse-prompt</span> <span class="s2">"User:"</span> <span class="nt">--in-prefix</span> <span class="s2">" "</span> <span class="nt">-f</span> <span class="nv">$LLAMA</span>/llama.cpp/prompts/chat-with-bob.txt
</code></pre></div></div> <p><strong>The output shown below was ran on a single A100-80GB instance.</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Log start
main: build <span class="o">=</span> 2295 <span class="o">(</span>87c91c07<span class="o">)</span>
main: built with gcc <span class="o">(</span>GCC<span class="o">)</span> 12.2.0 <span class="k">for </span>x86_64-pc-linux-gnu
main: seed  <span class="o">=</span> 1709276455
llama_model_loader: loaded meta data with 19 key-value pairs and 363 tensors from /depot/euge/data/araviki/llama/gguf/llama-2-13b.Q5_K_M.gguf <span class="o">(</span>version GGUF V2<span class="o">)</span>
llama_model_loader: Dumping metadata keys/values. Note: KV overrides <span class="k">do </span>not apply <span class="k">in </span>this output.
llama_model_loader: - kv   0:                       general.architecture str              <span class="o">=</span> llama
llama_model_loader: - kv   1:                               general.name str              <span class="o">=</span> LLaMA v2
llama_model_loader: - kv   2:                       llama.context_length u32              <span class="o">=</span> 4096
llama_model_loader: - kv   3:                     llama.embedding_length u32              <span class="o">=</span> 5120
llama_model_loader: - kv   4:                          llama.block_count u32              <span class="o">=</span> 40
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              <span class="o">=</span> 13824
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              <span class="o">=</span> 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              <span class="o">=</span> 40
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              <span class="o">=</span> 40
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              <span class="o">=</span> 0.000010
llama_model_loader: - kv  10:                          general.file_type u32              <span class="o">=</span> 17
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              <span class="o">=</span> llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   <span class="o">=</span> <span class="o">[</span><span class="s2">"&lt;unk&gt;"</span>, <span class="s2">"&lt;s&gt;"</span>, <span class="s2">"&lt;/s&gt;"</span>, <span class="s2">"&lt;0x00&gt;"</span>, <span class="s2">"&lt;...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   81 tensors
llama_model_loader: - type q5_K:  241 tensors
llama_model_loader: - type q6_K:   41 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V2
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 4096
llm_load_print_meta: n_embd           = 5120
llm_load_print_meta: n_head           = 40
llm_load_print_meta: n_head_kv        = 40
llm_load_print_meta: n_layer          = 40
llm_load_print_meta: n_rot            = 128
llm_load_print_meta: n_embd_head_k    = 128
llm_load_print_meta: n_embd_head_v    = 128
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 5120
llm_load_print_meta: n_embd_v_gqa     = 5120
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-05
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 13824
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 4096
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 13B
llm_load_print_meta: model ftype      = Q5_K - Medium
llm_load_print_meta: model params     = 13.02 B
llm_load_print_meta: model size       = 8.60 GiB (5.67 BPW) 
llm_load_print_meta: general.name     = LLaMA v2
llm_load_print_meta: BOS token        = 1 '&lt;s&gt;'
llm_load_print_meta: EOS token        = 2 '&lt;/s&gt;'
llm_load_print_meta: UNK token        = 0 '&lt;unk&gt;'
llm_load_print_meta: LF token         = 13 '&lt;0x0A&gt;'
llm_load_tensors: ggml ctx size =    0.28 MiB
llm_load_tensors: offloading 40 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 41/41 layers to GPU
llm_load_tensors:        CPU buffer size =   107.42 MiB
llm_load_tensors:      CUDA0 buffer size =  8694.21 MiB
....................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
ggml_init_cublas: GGML_CUDA_FORCE_MMQ:   no
ggml_init_cublas: CUDA_USE_TENSOR_CORES: yes
ggml_init_cublas: found 1 CUDA devices:
  Device 0: NVIDIA A100 80GB PCIe, compute capability 8.0, VMM: yes
llama_kv_cache_init:      CUDA0 KV buffer size =   400.00 MiB
llama_new_context_with_model: KV self size  =  400.00 MiB, K (f16):  200.00 MiB, V (f16):  200.00 MiB
llama_new_context_with_model:  CUDA_Host input buffer size   =    12.01 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =    81.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    10.00 MiB
llama_new_context_with_model: graph splits (measure): 2

system_info: n_threads = 32 / 64 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | 
main: interactive mode on.
Reverse prompt: 'User:'
Input prefix: ' '
sampling: 
        repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
        top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
        mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -&gt; Penalties -&gt; top_k -&gt; tfs_z -&gt; typical_p -&gt; top_p -&gt; min_p -&gt; temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 512, n_keep = 1


== Running in interactive mode. ==
 - Press Ctrl+C to interject at any time.
 - Press Return to return control to LLaMa.
 - To return control without starting a new line, end your input with '/'.
 - If you want to submit another line, end your input with '</span><span class="se">\'</span><span class="s2">.

 Transcript of a dialog, where the User interacts with an Assistant named Bob. Bob is helpful, kind, honest, good at writing, and never fails to answer the User's requests immediately and with precision.

User: Hello, Bob.
Bob: Hello. How may I help you today?
User: Please tell me the largest city in Europe.
Bob: Sure. The largest city in Europe is Moscow, the capital of Russia.
User: 

llama_print_timings:        load time =    1439.09 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =      73.35 ms /    99 tokens (    0.74 ms per token,  1349.66 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =    1017.78 ms /   100 tokens
</span></code></pre></div></div> <h2 id="barebones-python-connector">Barebones python connector</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LocalLlama</span><span class="p">:</span> 
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">gguf_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">llama_cpp_path</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">LLAMA</span><span class="sh">'</span><span class="p">]):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">llama_cpp_path</span> <span class="o">=</span> <span class="n">llama_cpp_path</span>
    <span class="n">self</span><span class="p">.</span><span class="n">gguf_path</span> <span class="o">=</span> <span class="n">gguf_path</span>
    <span class="n">self</span><span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="p">{</span> 
        <span class="sh">"</span><span class="s">repeat_penalty</span><span class="sh">"</span><span class="p">:</span> <span class="mf">1.5</span><span class="p">,</span> 
        <span class="sh">"</span><span class="s">n-gpu-layers</span><span class="sh">"</span><span class="p">:</span> <span class="mi">15000</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">ctx_size</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2048</span>
    <span class="p">}</span>

  <span class="nd">@timeoutable</span><span class="p">()</span>
  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">grammar</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">stop_at</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">flags</span><span class="p">:</span> 
        <span class="n">self</span><span class="p">.</span><span class="n">flags</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">flags</span><span class="p">)</span>

      <span class="n">flags</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">flags</span>

      <span class="k">if</span> <span class="n">grammar</span><span class="p">:</span> 
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">./grammar.gnbf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> 
          <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">flags</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">'</span><span class="s">grammar-file</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">./grammar.gnbf</span><span class="sh">'</span><span class="p">})</span>

      <span class="n">self</span><span class="p">.</span><span class="nf">write_file</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>

      <span class="k">with</span> <span class="nf">suppress_stdout_stderr</span><span class="p">():</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_output</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">format_command</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">flags</span><span class="p">),</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>

      <span class="k">if</span> <span class="n">stop_at</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">output</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">stop_at</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>

      <span class="k">return</span> <span class="n">output</span>

  <span class="k">def</span> <span class="nf">write_file</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">):</span> 
      <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">./prompt.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> 
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span> 

  <span class="k">def</span> <span class="nf">format_command</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
      <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">llama_cpp_path</span><span class="si">}</span><span class="s">/main  --model </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">gguf_path</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="sa">f</span><span class="sh">"</span><span class="s">--</span><span class="si">{</span><span class="n">k</span><span class="si">}</span> <span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="sh">"</span><span class="s"> for k, v in flags.items()])</span><span class="si">}</span><span class="s"> --file ./prompt.txt --temp </span><span class="si">{</span><span class="n">temperature</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="software"/><category term="guide"/><category term="software"/><category term="research"/><summary type="html"><![CDATA[Scripts + Guide to automate installations]]></summary></entry><entry><title type="html">Defining Reproducibility in AI/ML Research!</title><link href="https://akshathraghav.github.io/blog/2024/rais/" rel="alternate" type="text/html" title="Defining Reproducibility in AI/ML Research!"/><published>2024-02-27T00:20:00+00:00</published><updated>2024-02-27T00:20:00+00:00</updated><id>https://akshathraghav.github.io/blog/2024/rais</id><content type="html" xml:base="https://akshathraghav.github.io/blog/2024/rais/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="software"/><category term="research"/><summary type="html"><![CDATA[This]]></summary></entry></feed>